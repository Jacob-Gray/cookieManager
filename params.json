{"name":"Cookiemanager","tagline":"A small js lib to make managing browsers cookies less of a pain.","body":"#cookieManager.js\r\nA small js lib to make managing browsers cookies less of a pain. \r\n\r\n#How to use\r\nTo start, simply create a `cookieManager` object like:\r\n```javascript\r\nvar cookies = cookieManager();\r\n```\r\nYou can now manage the cookies with this `cookies` object.\r\n```javascript\r\nvar cookies = cookieManager();\r\ncookies.set(\"Name\",\"Value\",\"Expiration date with a Date() (leave blank for session variable)\",\"custom path\",\"secure\");\r\n```\r\nOr, a real world example:\r\n```javascript\r\ncookies.set(\"user\",\"Jim\",\"\",\"\",\"true\");\r\n```\r\nThe above would create a cookie called `user`, with the value `Jim`. It would be a session variable, with the current document path, and would only be sent over a secure(`HTTPS`) connection.\r\n\r\n#Methods\r\nThere are 7 different methods in cookieManager.\r\n\r\n| Method  \t| Use \t| Parameters \t| Notes \t|\r\n|---------------\t|-------------------------------\t|-----------------------------------\t|--------------------------------------------------------------------------------\t|\r\n| `set()` \t| Set or update a cookie \t| Name,Value,Expiration,Path,Secure \t| Can have other methods chained to it eg `c.set(...).getAll()` \t|\r\n| `get()` \t| Get the value of a cookie \t| Name \t| If the Name parameter is set to `*`, it will return an array with all cookies. \t|\r\n| `getAll()` \t| Get the value of all cookies \t|  \t| Is the same as `get(\"*\")` \t|\r\n| `has()` \t| Checks if a cookie exists \t| Name \t| Returns `true/false` \t|\r\n| `delete()` \t| Deletes a cookie \t| Name \t| Can be chained. If name is `*` will delete all. \t|\r\n| `deleteAll()` \t| Deletes all cookies. \t|  \t| Is the same as `delete(\"*\")` \t|\r\n| `enabled()` \t| Checks if cookies are enabled \t| Function \t| Returns `true/false`. If a function is inputted, it runs if true. \t|\r\n\r\n#Example:\r\nSet and get the value of a cookie:\r\n```javascript\r\nvar cookies = cookieManager();\r\ncookies.set(\"opinion\",\"This is cool!\");\r\nvar results = cookies.get(\"opinion\");\r\n```\r\nUpdate cookie:\r\n```javascript\r\nvar cookies = cookieManager();\r\ncookies.set(\"opinion\",\"This is cool!\");\r\nvar results1 = cookies.get(\"opinion\");\r\ncookies.set(\"opinion\",\"Even cooler!\");\r\nvar results2 = cookies.get(\"opinion\");\r\n```\r\nGet all cookies:\r\n```javascript\r\nvar cookies = cookieManager();\r\nvar results1 = cookies.get(\"*\");\r\nvar results2 = cookies.getAll();\r\n```\r\nDelete cookie:\r\n```javascript\r\nvar cookies = cookieManager();\r\nvar results1 = cookies.delete(\"myCookie\");\r\n```\r\nDelete all cookies:\r\n```javascript\r\nvar cookies = cookieManager();\r\ncookies.delete(\"*\");\r\ncookies.deleteAll(\"*\");\r\n```\r\nHas cookie:\r\n```javascript\r\nvar cookies = cookieManager();\r\nif(cookies.has(\"myCookie\")) alert(\"We found the cookie!\");\r\n```\r\nCookies enabled:\r\n```javascript\r\nvar cookies = cookieManager();\r\ncookies.enabled(function(){\r\n  //Cookies are enabled\r\n});\r\nif(cookies.enabled()) ;//cookies are enabled\r\nelse ;//cookies are not enabled\r\n```\r\nSet cookie with custom path(Note that if you set a cookie with a custom path, you won't be able to get it's value unless you are at the path or one of it's children):\r\n```javascript\r\nvar cookies = cookieManager();\r\ncookies.set(\"test\",\"custom path!\",\"\",\"/customPath\");\r\n```\r\nDelete cookie with custom path:\r\n```javascript\r\nvar cookies = cookieManager();\r\ncookies.delete(\"test\",\"/customPath\");\r\n```\r\n`deleteAll()` will not delete custom path cookies.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}